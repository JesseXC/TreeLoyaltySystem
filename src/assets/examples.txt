
const Cube = ({position, size, color}) => {
  const ref = useRef()

  useFrame((state, delta)=>{
    ref.current.rotation.x += delta
    ref.current.rotation.y += delta 
    ref.current.position.z += Math.sin(state.clock.elapsedTime)
  })

  return (
    <mesh position={position} ref = {ref}>
    <boxGeometry args={size}/>
    <meshStandardMaterial color={color}/>
    </mesh>
  )
}

function Plane({position, size}){
  return(
    <mesh position={position} rotation={[-Math.PI/2,0,0]}>
      <planeGeometry args={size}/>
      <meshStandardMaterial color="lightBlue"/>
    </mesh>
  )
}

const Sphere = ({position, size, color}) => {
  const ref = useRef()
  const [isHovered,setIsHovered] = useState(false)
  const [isClicked,setIsClicked] = useState(false)

  useFrame((state, delta)=>{
    const speed = isHovered? 1 : .2
    ref.current.rotation.y += delta * speed
  })

  return (
    <mesh 
      position={position} 
      ref = {ref} 
      onPointerEnter={(event) => (event.stopPropagation(), setIsHovered(true))} 
      onPointerLeave={() => setIsHovered(false)}
      onClick={() => setIsClicked(!isClicked)}
      scale={isClicked ? 1.5: 1}
    >
      <sphereGeometry args={size}/>
      <meshStandardMaterial color ={isHovered ? "orange":"blue"} wireframe/>
    </mesh>
  )
}

const Torus = ({position, size, color}) => {
  return (
    <mesh position={position}>
      <torusGeometry args={size}/>
      <meshStandardMaterial color ={color}/>
    </mesh>
  )
}

const TorusKnot = ({position, size}) => {
  const ref = useRef()
  const {color, radius} = useControls({
    color: "lightblue",
    radius: {
      value: 5, 
      min: 1,
      max: 10,
      step: .5,
    }
  })
  // useFrame((state, delta)=>{
  //   ref.current.rotation.x += delta
  //   ref.current.rotation.y += delta 
  //   ref.current.position.z += Math.sin(state.clock.elapsedTime)
  // })

  return (
    <mesh position={position} ref={ref}>
      <torusKnotGeometry args={[radius, ...size]}/>
      {/* <meshStandardMaterial color ={color}/> */}
      <MeshWobbleMaterial factor={5} speed = {2} color = {color}/>
    </mesh>
  )
}
const Scene = () =>{
  const directionalLightRef = useRef()
  const {lightColor, lightIntensity} = useControls({
    lightColor:"white",
    lightIntensity:{
      value: .5,
      min: 0,
      max: 5,
      step: .1,
    }
  })
  useHelper(directionalLightRef, DirectionalLightHelper, .5,"black")

  return (
    <>
    <directionalLight position={[0,2,2]} intensity = {lightIntensity} ref={directionalLightRef} color={lightColor}/>
      <ambientLight intensity={0.1}/>
      {/* <group position={[0,-1,0]}>
      <Cube position={[1,0,0,]} color={"green"} size={[1,1,1]}/>
      <Cube position={[-1,0,0]} color={"hotpink"} size={[1,1,1]}/>
      <Cube position={[-1,2,0,]} color={"blue"} size={[1,1,1]}/>
      <Cube position={[1,2,0]} color={"yellow"} size={[1,1,1]}/>
      </group> */}
      {/* <Cube position={[0,0,0]} size={[1,1,1]} color={"orange"}/> */}
      {/* <Sphere position={[0,0,0]} size={[1,30,30]} color={"orange"}/> */}
      {/* <Torus position={[2,0,0]} size={[0.5,0.1,30,30]} color={"blue"}/> */}
      <TorusKnot position = {[0,2,0]} size = {[0.1,1000,50]} color = {"hotpink"}/>
      <Plane position = {[0,0,0]} size={[100,100]}/>
      <OrbitControls enableZoom={true} />
    </>
  )
}